
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\005\003\000\002\005\004\000\002\006\013\000" +
    "\002\007\003\000\002\007\005\000\002\010\005\000\002" +
    "\011\003\000\002\011\004\000\002\012\007\000\002\012" +
    "\007\000\002\012\010\000\002\012\012\000\002\012\010" +
    "\000\002\012\006\000\002\012\007\000\002\012\010\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\013\005\000\002\013\006" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\010\000\002" +
    "\013\003\000\002\016\005\000\002\016\006\000\002\015" +
    "\005\000\002\015\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\004\004\006\001\002\000\004\002\001\001" +
    "\002\000\004\002\212\001\002\000\004\057\011\001\002" +
    "\000\006\002\uffff\004\006\001\002\000\004\002\ufffe\001" +
    "\002\000\006\011\013\052\012\001\002\000\004\057\016" +
    "\001\002\000\004\057\014\001\002\000\004\052\015\001" +
    "\002\000\004\057\016\001\002\000\004\047\024\001\002" +
    "\000\006\053\ufffb\057\016\001\002\000\004\053\021\001" +
    "\002\000\004\043\022\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\004\053\ufffa\001\002\000\006\042\026\057" +
    "\027\001\002\000\004\050\035\001\002\000\004\057\027" +
    "\001\002\000\004\044\031\001\002\000\004\050\ufff8\001" +
    "\002\000\004\057\032\001\002\000\014\026\ufff6\030\ufff6" +
    "\042\ufff6\050\ufff6\057\ufff6\001\002\000\006\042\026\057" +
    "\027\001\002\000\004\050\ufff7\001\002\000\004\044\036" +
    "\001\002\000\004\057\037\001\002\000\004\052\040\001" +
    "\002\000\034\007\047\012\056\017\041\020\051\024\043" +
    "\025\050\027\053\041\054\047\057\054\045\055\042\056" +
    "\046\057\055\001\002\000\034\007\047\012\056\017\041" +
    "\020\051\024\043\025\050\027\053\041\054\047\057\054" +
    "\045\055\042\056\046\057\055\001\002\000\022\032\066" +
    "\033\070\034\062\035\063\036\064\037\072\046\067\057" +
    "\071\001\002\000\034\007\047\012\056\017\041\020\051" +
    "\024\043\025\050\027\053\041\054\047\057\054\045\055" +
    "\042\056\046\057\055\001\002\000\004\053\176\001\002" +
    "\000\022\032\066\033\070\034\062\035\063\036\064\037" +
    "\072\046\067\057\071\001\002\000\022\032\066\033\070" +
    "\034\062\035\063\036\064\037\072\046\067\057\071\001" +
    "\002\000\034\007\047\012\056\017\041\020\051\024\043" +
    "\025\050\027\053\041\054\047\057\054\045\055\042\056" +
    "\046\057\055\001\002\000\034\007\047\012\056\017\041" +
    "\020\051\024\043\025\050\027\053\041\054\047\057\054" +
    "\045\055\042\056\046\057\055\001\002\000\034\007\047" +
    "\012\056\017\041\020\051\024\043\025\050\027\053\041" +
    "\054\047\057\054\045\055\042\056\046\057\055\001\002" +
    "\000\040\007\047\012\056\017\041\020\051\024\043\025" +
    "\050\027\053\041\054\047\057\050\ufff5\053\ufff5\054\045" +
    "\055\042\056\046\057\055\001\002\000\034\007\047\012" +
    "\056\017\041\020\051\024\043\025\050\027\053\041\054" +
    "\047\057\054\045\055\042\056\046\057\055\001\002\000" +
    "\034\007\047\012\056\017\041\020\051\024\043\025\050" +
    "\027\053\041\054\047\057\054\045\055\042\056\046\057" +
    "\055\001\002\000\026\032\066\033\070\034\062\035\063" +
    "\036\064\037\132\044\127\046\067\047\131\057\071\001" +
    "\002\000\004\057\027\001\002\000\034\007\047\012\056" +
    "\017\041\020\051\024\043\025\050\027\053\041\054\047" +
    "\057\054\045\055\042\056\046\057\055\001\002\000\004" +
    "\050\061\001\002\000\022\032\066\033\070\034\062\035" +
    "\063\036\064\037\072\046\067\057\071\001\002\000\034" +
    "\007\047\012\056\017\041\020\051\024\043\025\050\027" +
    "\053\041\054\047\057\054\045\055\042\056\046\057\055" +
    "\001\002\000\034\007\047\012\056\017\041\020\051\024" +
    "\043\025\050\027\053\041\054\047\057\054\045\055\042" +
    "\056\046\057\055\001\002\000\034\007\047\012\056\017" +
    "\041\020\051\024\043\025\050\027\053\041\054\047\057" +
    "\054\045\055\042\056\046\057\055\001\002\000\076\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\012\uffee\014\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\024\uffee\025" +
    "\uffee\027\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\041\uffee\046\uffee\047\uffee\050\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\001\002\000\034\007\047" +
    "\012\056\017\041\020\051\024\043\025\050\027\053\041" +
    "\054\047\057\054\045\055\042\056\046\057\055\001\002" +
    "\000\076\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\024\uffdb\025\uffdb\027\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\041\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\001\002\000" +
    "\034\007\047\012\056\017\041\020\051\024\043\025\050" +
    "\027\053\041\054\047\057\054\045\055\042\056\046\057" +
    "\055\001\002\000\004\040\100\001\002\000\036\007\047" +
    "\012\056\017\041\020\051\024\043\025\050\027\053\036" +
    "\073\041\054\047\057\054\045\055\042\056\046\057\055" +
    "\001\002\000\034\007\047\012\056\017\041\020\051\024" +
    "\043\025\050\027\053\041\054\047\057\054\045\055\042" +
    "\056\046\057\055\001\002\000\022\032\066\033\070\034" +
    "\062\035\063\036\064\037\072\046\067\057\071\001\002" +
    "\000\076\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\024\uffe3\025\uffe3\027\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\041\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\001\002\000" +
    "\022\032\066\033\070\034\062\035\063\036\064\037\072" +
    "\046\067\057\071\001\002\000\076\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2\027\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\041\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\053\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\001\002\000\004\047\101\001\002\000\034" +
    "\007\047\012\056\017\041\020\051\024\043\025\050\027" +
    "\053\041\054\047\057\054\045\055\042\056\046\057\055" +
    "\001\002\000\004\050\103\001\002\000\034\007\047\012" +
    "\056\017\041\020\051\024\043\025\050\027\053\041\054" +
    "\047\057\054\045\055\042\056\046\057\055\001\002\000" +
    "\076\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\024" +
    "\uffdc\025\uffdc\027\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\041\uffdc\046\uffdc\047\uffdc\050\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\001\002\000\022" +
    "\032\066\033\070\034\062\035\063\036\064\037\072\046" +
    "\067\057\071\001\002\000\076\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\027\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\041\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\001\002\000\022\032\066\033\070\034\062\035" +
    "\063\036\064\037\072\046\067\057\071\001\002\000\076" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0" +
    "\025\uffe0\027\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\041\uffe0\046\uffe0\047\uffe0\050\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\057\uffe0\001\002\000\022\032" +
    "\066\033\070\034\062\035\063\036\064\037\072\046\067" +
    "\057\071\001\002\000\076\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\025\uffe1\027\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\041\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\001\002\000\022\032\066\033\070\034\062\035\063" +
    "\036\064\037\072\046\067\057\071\001\002\000\076\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\012\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\024\uffde\025" +
    "\uffde\027\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\037\uffde\041\uffde\046\uffde\047\uffde\050\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\001\002\000\022\032\066" +
    "\033\070\034\062\035\063\036\064\037\072\046\067\057" +
    "\071\001\002\000\076\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\024\uffdf\025\uffdf\027\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\041\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\001\002\000\004\026\124\001\002\000\004\010\121\001" +
    "\002\000\034\007\047\012\056\017\041\020\051\024\043" +
    "\025\050\027\053\041\054\047\057\054\045\055\042\056" +
    "\046\057\055\001\002\000\022\032\066\033\070\034\062" +
    "\035\063\036\064\037\072\046\067\057\071\001\002\000" +
    "\076\005\uffed\006\uffed\007\uffed\010\uffed\012\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\024" +
    "\uffed\025\uffed\027\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\041\uffed\046\uffed\047\uffed\050\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\001\002\000\034" +
    "\007\047\012\056\017\041\020\051\024\043\025\050\027" +
    "\053\041\054\047\057\054\045\055\042\056\046\057\055" +
    "\001\002\000\006\010\uffd8\057\027\001\002\000\004\010" +
    "\uffd7\001\002\000\004\057\141\001\002\000\076\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7" +
    "\027\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\041\uffe7\046\uffe7\047\uffe7\050\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\001\002\000\034\007\047\012" +
    "\056\017\041\020\051\024\043\025\050\027\053\041\054" +
    "\047\057\054\045\055\042\056\046\057\055\001\002\000" +
    "\040\007\047\012\056\017\041\020\051\024\043\025\050" +
    "\027\053\036\073\041\054\045\133\047\057\054\045\055" +
    "\042\056\046\057\055\001\002\000\034\007\047\012\056" +
    "\017\041\020\051\024\043\025\050\027\053\041\054\047" +
    "\057\054\045\055\042\056\046\057\055\001\002\000\022" +
    "\032\066\033\070\034\062\035\063\036\064\037\072\046" +
    "\067\057\071\001\002\000\076\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\027\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\041\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\001\002\000\004\050\137\001\002\000\022\032" +
    "\066\033\070\034\062\035\063\036\064\037\072\046\067" +
    "\057\071\001\002\000\076\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\024\ufff2\025\ufff2\027\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\041\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\001\002\000\004\042\142\001\002\000\034\007\047" +
    "\012\056\017\041\020\051\024\043\025\050\027\053\041" +
    "\054\047\057\054\045\055\042\056\046\057\055\001\002" +
    "\000\022\032\066\033\070\034\062\035\063\036\064\037" +
    "\072\046\067\057\071\001\002\000\076\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\027\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\041" +
    "\ufff1\046\ufff1\047\ufff1\050\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\057\ufff1\001\002\000\022\032\066\033\070\034" +
    "\062\035\063\036\064\037\072\046\067\057\071\001\002" +
    "\000\076\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\024\uffe9\025\uffe9\027\uffe9\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\041\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\001\002\000" +
    "\022\032\066\033\070\034\062\035\063\036\064\037\072" +
    "\046\067\057\071\001\002\000\076\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\027\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\041\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\001\002\000\006\050\ufff4\053\ufff4\001\002" +
    "\000\004\022\153\001\002\000\004\057\027\001\002\000" +
    "\004\030\160\001\002\000\004\021\156\001\002\000\022" +
    "\032\066\033\070\034\062\035\063\036\064\037\072\046" +
    "\067\057\071\001\002\000\076\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\024\uffec\025\uffec\027\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\041\uffec\046" +
    "\uffec\047\uffec\050\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\001\002\000\034\007\047\012\056\017\041\020" +
    "\051\024\043\025\050\027\053\041\054\047\057\054\045" +
    "\055\042\056\046\057\055\001\002\000\006\021\uffda\057" +
    "\027\001\002\000\004\021\uffd9\001\002\000\022\032\066" +
    "\033\070\034\062\035\063\036\064\037\072\046\067\057" +
    "\071\001\002\000\076\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\024\uffea\025\uffea\027\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\041\uffea\046\uffea\047" +
    "\uffea\050\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\001\002\000\004\016\166\001\002\000\034\007\047\012" +
    "\056\017\041\020\051\024\043\025\050\027\053\041\054" +
    "\047\057\054\045\055\042\056\046\057\055\001\002\000" +
    "\004\005\170\001\002\000\034\007\047\012\056\017\041" +
    "\020\051\024\043\025\050\027\053\041\054\047\057\054" +
    "\045\055\042\056\046\057\055\001\002\000\004\006\172" +
    "\001\002\000\022\032\066\033\070\034\062\035\063\036" +
    "\064\037\072\046\067\057\071\001\002\000\076\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0\025\ufff0" +
    "\027\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\041\ufff0\046\ufff0\047\ufff0\050\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\001\002\000\076\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4\027" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\041\uffe4\046\uffe4\047\uffe4\050\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\001\002\000\076\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\027\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\041" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\001\002\000\006\053\ufff9\057\ufff9\001" +
    "\002\000\022\032\066\033\070\034\062\035\063\036\064" +
    "\037\072\046\067\057\071\001\002\000\076\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\027" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\041\uffeb\046\uffeb\047\uffeb\050\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\001\002\000\076\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6\027\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\041" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\001\002\000\004\014\203\001\002\000" +
    "\034\007\047\012\056\017\041\020\051\024\043\025\050" +
    "\027\053\041\054\047\057\054\045\055\042\056\046\057" +
    "\055\001\002\000\004\015\205\001\002\000\022\032\066" +
    "\033\070\034\062\035\063\036\064\037\072\046\067\057" +
    "\071\001\002\000\076\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\024\uffef\025\uffef\027\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\041\uffef\046\uffef\047" +
    "\uffef\050\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\001\002\000\004\053\210\001\002\000\004\043\211\001" +
    "\002\000\006\002\ufffd\004\ufffd\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\010\002\004\003\003\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\007\004\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\206\006\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\017\006\016\001\001\000" +
    "\002\001\001\000\006\005\022\006\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\024\010\027\001\001\000\002\001\001" +
    "\000\004\010\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\033" +
    "\010\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\043\012\051" +
    "\001\001\000\004\012\201\001\001\000\004\013\200\001" +
    "\001\000\004\012\176\001\001\000\002\001\001\000\004" +
    "\013\174\001\001\000\004\013\173\001\001\000\004\012" +
    "\164\001\001\000\004\012\162\001\001\000\004\012\151" +
    "\001\001\000\006\011\150\012\051\001\001\000\004\012" +
    "\146\001\001\000\004\012\144\001\001\000\004\013\127" +
    "\001\001\000\006\010\116\015\117\001\001\000\006\011" +
    "\057\012\051\001\001\000\002\001\001\000\004\013\064" +
    "\001\001\000\004\012\114\001\001\000\004\012\112\001" +
    "\001\000\004\012\110\001\001\000\002\001\001\000\004" +
    "\012\106\001\001\000\002\001\001\000\004\012\104\001" +
    "\001\000\002\001\001\000\004\012\073\001\001\000\004" +
    "\012\075\001\001\000\004\013\074\001\001\000\002\001" +
    "\001\000\004\013\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\101\001\001\000\002\001\001\000" +
    "\004\012\103\001\001\000\002\001\001\000\004\013\105" +
    "\001\001\000\002\001\001\000\004\013\107\001\001\000" +
    "\002\001\001\000\004\013\111\001\001\000\002\001\001" +
    "\000\004\013\113\001\001\000\002\001\001\000\004\013" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\121\001\001\000\004\013\122\001" +
    "\001\000\002\001\001\000\004\012\124\001\001\000\006" +
    "\010\116\015\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\135\001\001\000\004" +
    "\012\073\001\001\000\004\012\133\001\001\000\004\013" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\142\001\001\000\004\013\143\001\001\000\002" +
    "\001\001\000\004\013\145\001\001\000\002\001\001\000" +
    "\004\013\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\153\016\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\156\001\001" +
    "\000\002\001\001\000\004\012\160\001\001\000\006\010" +
    "\153\016\161\001\001\000\002\001\001\000\004\013\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\166\001\001\000\002\001\001\000\004\012\170\001\001" +
    "\000\002\001\001\000\004\013\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\203\001\001\000\002" +
    "\001\001\000\004\013\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              program RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new program(curr_lineno(), cl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		program start_val = (program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class_cool 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		class_ c = (class_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_cool class_list 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		class_ c = (class_)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_cool ::= CLASS_COOL TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_ RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new class_(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_cool",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_cool ::= CLASS_COOL TYPEID INHERITS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_ RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new class_(curr_lineno(), n, p, f, curr_filename()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_cool",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dummy_feature_list ::= feature 
            {
              Features RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		feature_ f = (feature_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Features(curr_lineno()).appendElement(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dummy_feature_list ::= feature dummy_feature_list 
            {
              Features RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		feature_ f = (feature_)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dflright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Features dfl = (Features)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dfl.appendElement(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature ::= TYPEID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr_list RBRACE 
            {
              feature_ RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new feature_(curr_lineno(), n, f, p, e, curr_filename()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formal_list ::= formal 
            {
              Formal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		formal_ f = (formal_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal(curr_lineno()).appendElement(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal_list ::= COMMA formal formal_list 
            {
              Formal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		formal_ f = (formal_)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal fl = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal ::= TYPEID COLON TYPEID 
            {
              formal_ RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new formal_(curr_lineno(), n, p, curr_filename());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr_list ::= expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Expr(curr_lineno()).appendElement(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr_list ::= expr expr_list 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e_list = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e_list.appendElement(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= TYPEID LT DASH expr expr_ 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new expr(curr_lineno(), n, curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= TYPEID LPAREN expr RPAREN expr_ 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new expr(curr_lineno(), n, curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= TYPEID COLON TYPEID COMMA expr expr_ 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new expr(curr_lineno(), n, p, curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= IF expr THEN expr ELSE expr FI expr_ 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(p).appendElement(f).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= WHILE expr LOOP expr POOL expr_ 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(p).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= LPAREN expr_list RPAREN expr_ 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new expr(curr_lineno(), e, curr_filename()).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= LET formal_assign_expr_list IN expr expr_ 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Formal_assign_exprs e = (Formal_assign_exprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new expr(curr_lineno(), e, curr_filename()).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= CASE expr OF formal_expr_list ESAC expr_ 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formal_exprs p = (Formal_exprs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new expr(curr_lineno(), p, curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= NEW expr expr_ 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= ISVOID expr expr_ 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= NEG expr expr_ 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= NOT expr expr_ 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= TYPEID expr_ 
            {
              Expr RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= INT_CONST expr_ 
            {
              Expr RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= STR_CONST expr_ 
            {
              Expr RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= BOOL_CONST expr_ 
            {
              Expr RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_ ::= LT expr expr_ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_ ::= LT EQ expr expr_ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_ ::= EQ expr expr_ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_ ::= PLUS expr expr_ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_ ::= MINUS expr expr_ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_ ::= MULT expr expr_ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_ ::= DIV expr expr_ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_ ::= TYPEID DOT LPAREN expr RPAREN expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr el = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_ ::= LAMBDA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // formal_expr_list ::= formal LE expr 
            {
              Formal_exprs RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		formal_ f = (formal_)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal_exprs(curr_lineno()).appendElement(e).appendElement(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_expr_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formal_expr_list ::= formal LE expr formal_expr_list 
            {
              Formal_exprs RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		formal_ f = (formal_)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal_exprs fe = (Formal_exprs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT fe.appendElement(e).appendElement(f)
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_expr_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // formal_assign_expr_list ::= formal ASSIGN expr 
            {
              Formal_assign_exprs RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		formal_ f = (formal_)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal_assign_exprs(curr_lineno()).appendElement(e).appendElement(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_assign_expr_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // formal_assign_expr_list ::= formal ASSIGN expr formal_assign_expr_list 
            {
              Formal_assign_exprs RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		formal_ f = (formal_)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal_assign_exprs fa = (Formal_assign_exprs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT fa.appendElement(e).appendElement(f)
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_assign_expr_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
