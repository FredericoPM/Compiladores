/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS_COOL, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON, DASH, LAMBDA;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal program program;
nonterminal Classes class_list;
nonterminal class_ class_cool;
nonterminal Features dummy_feature_list;
nonterminal feature_ feature;
nonterminal Formal formal_list;
nonterminal formal_ formal;
nonterminal Expr expr_list;
nonterminal expr expr_;
nonterminal Expr_list ;
nonterminal Formal_assign_exprs formal_assign_expr_list;
nonterminal Formal_exprs formal_expr_list;

/* Precedence declarations go here. */

program	
	::= class_list:cl
	    {: RESULT = new program(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class_cool:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	|
    class_cool:c class_list:cl
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class_cool
	::= CLASS_COOL TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	|
    CLASS_COOL TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_(curr_lineno(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
    ::= feature:f
        {: RESULT = new Features(curr_lineno()).appendElement(f); :}
    |
    feature:f dummy_feature_list:dfl
        {: RESULT = dfl.appendElement(f); :}
    ;

feature
	::= TYPEID:n LPAREN formal_list:f RPAREN COLON TYPEID:p LBRACE expr_list:e RBRACE
	    {: RESULT = new feature_(curr_lineno(), n, f, p, e, curr_filename()); :}
    ;

formal_list
    ::= formal: f
        {: RESULT = new Formal(curr_lineno()).appendElement(f); :}
    |
    COMMA formal:f formal_list:fl
        {: RESULT = fl.appendElement(f); :}
    ;

formal
    ::= TYPEID:n COLON TYPEID:p
        {:RESULT = new formal_(curr_lineno(), n, p, curr_filename());:}
	;

expr_list
    ::= expr:e
        {:RESULT = new Expr(curr_lineno()).appendElement(e);:}
    |
    expr:e expr_list:e_list
        {:RESULT = e_list.appendElement(e);:}
    ;

expr
    ::= TYPEID:n LT DASH expr:e expr_:el
        {:RESULT = new expr(curr_lineno(), n, curr_filename()).appendElement(e).appendElement(el);:}
    |
    TYPEID:n LPAREN expr:e RPAREN expr_:el
         {:RESULT = new expr(curr_lineno(), n, curr_filename()).appendElement(e).appendElement(el);:}
    |
    TYPEID:n COLON TYPEID:p COMMA expr:e expr_:el
        {:RESULT = new expr(curr_lineno(), n, p, curr_filename()).appendElement(e).appendElement(el);:}
    |
    IF expr:e THEN expr:p ELSE expr:f FI expr_:el
        {:RESULT = new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(p).appendElement(f).appendElement(el);:}
    |
    WHILE expr:e LOOP expr:p POOL expr_:el
		{:RESULT = new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(p).appendElement(el);:}
	| 
    LPAREN expr_list:e RPAREN expr_:el
        {:RESULT = new expr(curr_lineno(), e, curr_filename()).appendElement(el);:}
    |
    LET formal_assign_expr_list:e IN expr expr_:el
        {:RESULT = new expr(curr_lineno(), e, curr_filename()).appendElement(el);:}
    |
    CASE expr:e OF formal_expr_list:p ESAC expr_:el
        {:RESULT = new expr(curr_lineno(), p, curr_filename()).appendElement(e).appendElement(el);:}
    |
    NEW expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    |
    ISVOID expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    |
    NEG expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    |
    NOT expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(el);:}
    |
    TYPEID expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(el);:}
    |
    INT_CONST expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(el);:}
    |
    STR_CONST expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(el);:}
    |
    BOOL_CONST expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(el);:}
    ;

expr_
    ::= LT expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    |
    LT EQ expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    |
    EQ expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    |
    PLUS expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    |
    MINUS expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    |
    MULT expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    |
    DIV expr:e expr_:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    |
    TYPEID DOT LPAREN expr:e RPAREN expr:el
        {:RESULT= new expr(curr_lineno(), curr_filename()).appendElement(e).appendElement(el);:}
    | 
    LAMBDA
    ;

formal_expr_list
    ::= formal:f LE expr:e
        {: RESULT = new Formal_exprs(curr_lineno()).appendElement(e).appendElement(f); :}
    |
    formal:f LE expr:e formal_expr_list:fe
        {:RESULT fe.appendElement(e).appendElement(f):}
    ;

formal_assign_expr_list
    ::= formal:f ASSIGN expr:e
        {: RESULT = new Formal_assign_exprs(curr_lineno()).appendElement(e).appendElement(f); :}
    |
    formal:f ASSIGN expr:e formal_assign_expr_list:fa
        {:RESULT fa.appendElement(e).appendElement(f):}
    ;
