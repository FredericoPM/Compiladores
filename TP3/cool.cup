/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS_COOL, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON, DASH;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal program program;
nonterminal Classes class_list;
nonterminal class_ _class;
nonterminal Features dummy_feature_list;
nonterminal feature_ feature;
nonterminal Formal formal_list;
nonterminal formal_ formal;
nonterminal Expr expr;
nonterminal Expr_list expr_list;
nonterminal Formal_assign_expr_list formal_assign_expr_list;
nonterminal Formal_expr_list formal_expr_list;

/* Precedence declarations go here. */

program	
	::= class_list:cl
	    {: RESULT = new program(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= _class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	|
    class_list:cl _class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
_class
	::= CLASS_COOL TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	|
    CLASS_COOL TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_(curr_lineno(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
    ::= feature:f
        {: RESULT = new Features(curr_lineno()).appendElement(f); :}
    |
    dummy_feature_list:dfl  feature:f
        {: RESULT = dfl.appendElement(f); :}
    ;

feature
	::= TYPEID:n LPAREN formal:f RPAREN COLON TYPEID:p LBRACE expr:e RBRACE
	    {: RESULT = new feature_(curr_lineno(), n, f, p, e, curr_filename()); :}
    ;

formal_list
    ::= formal: f
        {: RESULT = new Formal(curr_lineno()).appendElement(f); :}
    |
    formal_list:fl COMMA formal:f
        {: RESULT = fl.appendElement(f); :}
    ;

formal
    ::= TYPEID:n COLON TYPEID:p
        {:RESULT = new formal_(curr_lineno(), n, p, curr_filename());:}
	;

expr
    ::= TYPEID LT DASH expr
        {:RESULT:}
    |
    expr TYPEID DOT LPAREN expr RPAREN
        {:RESULT:}
    |
    TYPEID LPAREN expr RPAREN
         {:RESULT:}
    |
    TYPEID COLON TYPEID COMMA expr
        {:RESULT:}
    |
    IF expr THEN expr ELSE expr FI
        {:RESULT:}
    |
    WHILE expr LOOP expr POOL
		{:RESULT:}
	| 
    LPAREN expr_list RPAREN
        {:RESULT:}
    |
    LET formal_assign_expr_list IN expr
        {:RESULT:}
    |
    CASE expr OF formal_expr_list ESAC
        {:RESULT:}
    |
    NEW expr 
        {:RESULT:}
    |
    ISVOID expr 
        {:RESULT:}
    |
    expr PLUS expr
        {:RESULT:}
    |
    expr MINUS expr
        {:RESULT:}
    |
    expr MULT expr
    {:RESULT:}
        |
    expr DIV expr
        {:RESULT:}
    |
    NEG expr
        {:RESULT:}
    |
    expr LT expr
        {:RESULT:}
    |
    expr LT EQ expr
        {:RESULT:}
    |
    expr EQ expr
        {:RESULT:}
    |
    NOT expr
        {:RESULT:}
    |
    LPAREN expr RPAREN
        {:RESULT:}
    |
    TYPEID
        {:RESULT:}
    |
    INT_CONST
        {:RESULT:}
    |
    STR_CONST
        {:RESULT:}
    |
    BOOL_CONST
        {:RESULT:}
    ;

expr_list
    ::= expr:e
        {:RESULT:}
    |
    expr_list:e_list expr:e
        {:RESULT:}
    ;

formal_expr_list
    ::= formal LE expr:e
        {:RESULT:}
    |
    formal_expr_list:fel formal LE expr:e
        {:RESULT:}
    ;

formal_assign_expr_list
    ::= formal:f ASSIGN expr:e
        {:RESULT:}
    |
    formal_assign_expr_list:fael formal ASSIGN expr:e
        {:RESULT:}
    ;
